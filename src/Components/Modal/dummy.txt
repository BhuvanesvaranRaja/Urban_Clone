import {
  Button,
  Text,
  Box,
  Flex,
  ModalOverlay,
  useToast,
} from "@chakra-ui/react";
import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { CheckIcon } from "@chakra-ui/icons";

import { addToCart } from "../../Redux/Services/cartSlice";
import GetContactModal from "./GetContactModal";
import LoginModal from "./LoginModal";

const OverlayOne = () => (
  <ModalOverlay
    bg="blackAlpha.700"
    backdropFilter="blur(100px) hue-rotate(50deg)"
  />
);

function PriceDetails({ center }) {
  const services = center.services || [];
  const userDetails = useSelector((state) => state.auth.user);
  const [overlay, setOverlay] = React.useState(<OverlayOne />);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);
  const [quantity, setQuantity] = useState({}); // State to track quantity for each service

  const toast = useToast();
  const dispatch = useDispatch();
  const userAvailability = localStorage.getItem("token");
  const cartItem = useSelector((state) => state.cart);

  const closeModal = () => {
    setIsModalOpen(false);
  };

  // ...
  const handleAddToCart = (service, index) => {
    // Check for user login
    if (userAvailability === null) {
      setIsLoginModalOpen(true);
      console.log("user not logged");
      toast({
        title: "Please Log In to Continue",
        description: "You need to Log In to add items to your cart.",
        status: "error",
        position: "top-right",
        duration: 3000,
        containerStyle: {
          marginRight: "50px",
        },
        isClosable: false,
      });
    }
    // Check for availability of contact number
    else if (userDetails.contact === null || userDetails.contact === "") {
      setIsModalOpen(true);
      setOverlay(<OverlayOne />);
    } else {
      const centerData = {
        centerName: center.name,
        centerImage: center.image,
        centerContact: center.phone,
        centerAddress: center.address,
        centerReviwes: center.reviews,
      };
      console.log("data to be sent", centerData);
      dispatch(
        addToCart({
          centerData: centerData,
          serviceData: service,
        })
      );

      // Initialize the quantity for this service to 1 when "Add to Cart" is clicked
      setQuantity((prevQuantity) => ({
        ...prevQuantity,
        [index]: 1,
      }));
    }
  };

  // ...

  const handleIncrement = (index) => {
    setQuantity((prevQuantity) => ({
      ...prevQuantity,
      [index]: (prevQuantity[index] || 0) + 1,
    }));
  };

  const handleDecrement = (index) => {
    if (quantity[index] > 0) {
      setQuantity((prevQuantity) => ({
        ...prevQuantity,
        [index]: prevQuantity[index] - 1,
      }));
    }
  };

  return (
    <Box>
      <Text fontSize="x-large" fontWeight="bold" color={"blackAlpha"}>
        Services
      </Text>
      <ul>
        {services.map((service, index) => (
          <div key={index}>
            <Flex
              alignItems="center"
              justifyContent="space-between"
              padding={"5"}>
              <Flex flexDirection={"column"}>
                <Text fontWeight="semibold">{service.service_name}</Text>
                <Text>{service.price}</Text>
              </Flex>
              <div>
                {quantity[index] >= 1 ? (
                  <Flex alignItems="center">
                    <Button
                      colorScheme="teal"
                      size="sm"
                      onClick={() => handleDecrement(index)}>
                      -
                    </Button>
                    <Text>{quantity[index]}</Text>
                    <Button
                      colorScheme="teal"
                      size="sm"
                      onClick={() => handleIncrement(index)}>
                      +
                    </Button>
                  </Flex>
                ) : (
                  <Button
                    colorScheme="red"
                    onClick={() => handleAddToCart(service, index)}>
                    Add to Cart
                  </Button>
                )}
              </div>
            </Flex>
            <hr />
          </div>
        ))}
      </ul>
      {isModalOpen && (
        <GetContactModal
          isOpen={isModalOpen}
          onClose={closeModal}
          overlay={overlay}
          isModalOpen={true}
        />
      )}
      {isLoginModalOpen && (
        <LoginModal
          isOpen={isLoginModalOpen}
          onClose={() => setIsLoginModalOpen(false)}
          overlay={overlay}
        />
      )}
    </Box>
  );
}

export default PriceDetails;
